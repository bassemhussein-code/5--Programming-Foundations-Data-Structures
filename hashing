hashing : a way to take some row data and mixing all together to form a similar single piece of data. 


in encryption , there's a way to decrypt the encrypted item . 


but there is no way to unhash a hash value . 

in programming , we often use hash values as a way to store or get a value at a certain location .. 


###### Hash tabel ######

Hash table : is an implementation of hte associative array abstract data structure . 

when a hash table created internally , it's really an array based data structure where we add extra functionality to get us past the limitations of an array . 

we use the term (bucket) to describe each entry or place for a key-value pair to go in a hash table . 


we'll never add just a key or just a value . we'll always add a pair . 


when we add a new pair to the hash table alot of stuff is going on behind the scences  . The key will go through a hash function. 
and then an integer value will pop out . 
Depending on the function , it could be a rather large number , so we can't just use it as an array index in our implementation . 

but we can use it to calculate the array index . 
This requires some logic . 

and it's all done within the hash table implementation . 


""""""""""OUR GOAL""""""""""""""""""""""""""''
make integer hash value smaller but in array that's related to the current size of the hash table. 


""""""" Why do this ? """""""""""""""'




it helps us evenly distrubute the elements across the (buckets) we have. To keep this simple , we use a modular operation . 

Essentially we take hash value , divide it by the size of the hash table . or the number of buckets on the table and use the remainder as the index for where we'll store the value for a given key  , 


 """"""""""""""collision """"""""""""""""'
 
 sometimes there are collisions in which two separate keys each map to teh same slot in the table .
